{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"WJ_MLP_AllData_Stats","provenance":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"O58qlaWIqkWI","executionInfo":{"status":"ok","timestamp":1651175301718,"user_tz":240,"elapsed":481,"user":{"displayName":"Wen Jian","userId":"18293499394767959408"}},"outputId":"63e00826-9786-4e28-d1d0-0d61fd7d5f53"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["# Example plot of average noun vs. verb at node C3 across time\n","import matplotlib.pyplot as plt\n","\n","times = range(0, 751, 50)\n","C3_N_avg = [-0.02938921544, 0.07497572195, 0.1132839254, -0.006777408638, -0.2034347048, -0.2668515206, -0.3415797546, -0.3330718119,\n","            -0.4128903654, -0.1930488117, -0.08340403782, -0.1516764631, -0.2512883436, -0.49789931, -0.327704499, -0.1681523128]\n","C3_V_avg = [-0.1137425537, 0.0151955452, 0.1947630148, 0.1824553225, 0.07671328671, 0.01381507382, -0.1351825952, -0.3794923595,\n","            -0.4173840974, -0.08301476301, -0.2788344988, -0.2550893551, -0.4344107744, -0.3416317016, -0.3050841751, -0.4537399637]\n","plt.plot(times, C3_N_avg, times, C3_V_avg)\n","plt.show()"]},{"cell_type":"code","source":["# Run this cell to mount your Google Drive.\n","# from google.colab import drive\n","# drive.mount('/content/drive', force_remount = True)\n","\n","# Check current directory\n","import os\n","current_directory = os.getcwd()\n","print(current_directory) "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fSS8MdW4BZNy","executionInfo":{"status":"ok","timestamp":1651285825785,"user_tz":240,"elapsed":339,"user":{"displayName":"Wen Jian","userId":"18293499394767959408"}},"outputId":"d9f7e930-4114-4371-880e-83b6a5d2d4c4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content\n"]}]},{"cell_type":"code","source":["# Import data\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import csv\n","import pandas as pd\n","import torch\n","import torch.nn as nn\n","\n","# X = pd.read_csv(os.path.join(os.getcwd(), \"Adults_NV800_all_X.csv\"))\n","X_df = pd.read_csv(\"Adults_NV800_all_X.csv\")\n","X = np.where(np.isnan(X_df), 0, X_df)\n","print(\"X shape:\", X.shape) #(7775, 480)\n","# Convert from array to tensor\n","X_tensor = torch.from_numpy(X).float()\n","# Convert the 2D array to 3D: [# words, # electrods, # timepoints]\n","X_3D = np.reshape(X, (7775, 30, 16))\n","print(\"X_3D shape:\", X_3D.shape)\n","print(\"X_3D[0][0] (i.e. time-dependent signals of the first noun at node C3):\", X_3D[0][0])\n","\n","Y_df = pd.read_csv(\"Adults_NV800_all_Y.csv\")\n","print(\"Y shape:\", Y_df.shape)\n","# zero-out the non-numeric datapoints\n","Y = np.where(np.isnan(Y_df), 0, Y_df)\n","# Convert from array to tensor\n","Y_tensor = torch.from_numpy(Y).float()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dfJiTriA1QHb","executionInfo":{"status":"ok","timestamp":1651592628928,"user_tz":240,"elapsed":4352,"user":{"displayName":"Wen Jian","userId":"18293499394767959408"}},"outputId":"afb9c143-bcf6-4a08-c5af-2d4a5e827843"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["X shape: (7775, 480)\n","X_3D shape: (7775, 30, 16)\n","X_3D[0][0] (i.e. time-dependent signals of the first noun at node C3): [-42.89 -23.65 -18.96 -17.67 -24.25 -18.69 -26.57 -21.32 -23.59 -22.31\n"," -29.51 -35.12 -33.75 -44.52 -45.64 -44.99]\n","Y shape: (7775, 1)\n"]}]},{"cell_type":"markdown","source":["# MLP classification"],"metadata":{"id":"LxwBsUgj8wfv"}},{"cell_type":"markdown","source":["## 1.1. Sklearn MLP classifier with 1D input data\n","\n","*   Code adapted from https://github.com/jorgesleonel/Multilayer-Perceptron\n"],"metadata":{"id":"T90me57syKH3"}},{"cell_type":"code","source":["# MLP for 1D input X data \n","import pandas as pd\n","import sklearn\n","from sklearn import preprocessing\n","from sklearn.model_selection import train_test_split \n","from sklearn.preprocessing import StandardScaler  \n","from sklearn.neural_network import MLPClassifier \n","from sklearn.metrics import classification_report, confusion_matrix \n","\n","# split data into train and test (80% of dataset into training set and other 20% into test data)\n","X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.20)  "],"metadata":{"id":"atkKZN0Z83pu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["Y_train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zjfgIQT5L8FQ","executionInfo":{"status":"ok","timestamp":1651518854569,"user_tz":240,"elapsed":347,"user":{"displayName":"Wen Jian","userId":"18293499394767959408"}},"outputId":"7bf12991-b79a-4eef-87d1-001e9023c997"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1],\n","       [0],\n","       [1],\n","       ...,\n","       [0],\n","       [0],\n","       [0]])"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["# Feature scaling\n","scaler = StandardScaler()  \n","scaler.fit(X_train)\n","#X_train = scaler.transform(X_train)  \n","#X_test = scaler.transform(X_test) \n","Y_train_ravel = Y_train.ravel() #equivalent to .reshape(-1)\n","\n","# Call the MLP\n","mlp = MLPClassifier(hidden_layer_sizes=(10, 10), max_iter=5000)  \n","mlp.fit(X_train[:,:100], Y_train_ravel)  \n","\n","predictions = mlp.predict(X_test[:,:100]) \n","\n","print(predictions)\n","\n","# evaluation of algorithm performance in classifying noun vs. verb\n","print(confusion_matrix(Y_test,predictions))  \n","print(classification_report(Y_test,predictions))  \n"],"metadata":{"id":"_SsIL7_K_7Q-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1651520996454,"user_tz":240,"elapsed":8192,"user":{"displayName":"Wen Jian","userId":"18293499394767959408"}},"outputId":"87a794ce-add1-46f0-cca4-abc2074deca0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1 1 0 ... 0 0 0]\n","[[365 447]\n"," [350 393]]\n","              precision    recall  f1-score   support\n","\n","           0       0.51      0.45      0.48       812\n","           1       0.47      0.53      0.50       743\n","\n","    accuracy                           0.49      1555\n","   macro avg       0.49      0.49      0.49      1555\n","weighted avg       0.49      0.49      0.49      1555\n","\n"]}]},{"cell_type":"code","source":["#X_test.mean(),X_test.std(),X_train.mean(),X_train.std()\n","#Y_test.mean(), Y_train.mean()\n","\n","# Plot the nouns & verbs in X_train & X_test datasets\n","aa=X_train[Y_train[:,0]==0].mean(axis=0)\n","bb=X_train[Y_train[:,0]==1].mean(axis=0)\n","aa2=X_test[Y_test[:,0]==0].mean(axis=0)\n","bb2=X_test[Y_test[:,0]==1].mean(axis=0)\n","plt.subplot(121)\n","plt.plot(aa,'b-')\n","plt.plot(bb,'r-')\n","plt.subplot(122)\n","plt.plot(aa2,'m-')\n","plt.plot(bb2,'g-')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":268},"id":"JSUzTQ1bOalH","executionInfo":{"status":"ok","timestamp":1651519844923,"user_tz":240,"elapsed":907,"user":{"displayName":"Wen Jian","userId":"18293499394767959408"}},"outputId":"fb63caf0-b127-45fb-9d13-05c9d549d590"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["sid=np.argsort(aa)\n","plt.plot(aa[sid],'b-')\n","plt.plot(bb[sid],'r-')\n","#plt.plot(aa2[sid],'m-')\n","#plt.plot(bb2[sid],'g-')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":285},"id":"Bm1ocy1DUBGs","executionInfo":{"status":"ok","timestamp":1651520938042,"user_tz":240,"elapsed":68,"user":{"displayName":"Wen Jian","userId":"18293499394767959408"}},"outputId":"8fa8174a-3313-49ff-a155-85dd08bd47ba"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f7e78a99410>]"]},"metadata":{},"execution_count":78},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["np.where(aa-bb>0.08)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hnrD0sEVPsuv","executionInfo":{"status":"ok","timestamp":1651520078525,"user_tz":240,"elapsed":340,"user":{"displayName":"Wen Jian","userId":"18293499394767959408"}},"outputId":"3d207e3c-2139-4d04-f478-11fe49e36ade"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([ 47,  63, 330, 331, 332, 335, 362, 363, 364, 367, 383, 399, 442,\n","        443, 444, 447]),)"]},"metadata":{},"execution_count":59}]},{"cell_type":"code","source":["# the 447th dimension has the greatest mean difference between N&V in X_train, but no difference in X_test\n","ind=447\n","aa[ind],bb[ind],aa2[ind],bb2[ind]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EMNAyc-MTxaa","executionInfo":{"status":"ok","timestamp":1651520796552,"user_tz":240,"elapsed":608,"user":{"displayName":"Wen Jian","userId":"18293499394767959408"}},"outputId":"f9c44a49-a247-4725-f06b-6f330c40bd15"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0.0549660740264753,\n"," -0.05585693422139386,\n"," -0.025728812804568808,\n"," -0.02823466423195646)"]},"metadata":{},"execution_count":75}]},{"cell_type":"code","source":["# visualize the distributions of N&V signals on the linear space\n","bins = np.linspace(-2,2,20) \n","\n","plt.hist(X_train[Y_train[:,0]==0,447],bins,label='y=0',alpha=0.5)\n","plt.hist(X_train[Y_train[:,0]==1,447],bins,label='y=1',alpha=0.5)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":387},"id":"5z_AYZ3KP5f5","executionInfo":{"status":"ok","timestamp":1651520054541,"user_tz":240,"elapsed":803,"user":{"displayName":"Wen Jian","userId":"18293499394767959408"}},"outputId":"bbeb69a9-f91b-4e0b-fc5e-e7954a06499d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([ 44.,  56.,  98., 113., 140., 205., 202., 274., 245., 280., 260.,\n","        234., 218., 160., 135., 101.,  85.,  50.,  33.]),\n"," array([-2.        , -1.78947368, -1.57894737, -1.36842105, -1.15789474,\n","        -0.94736842, -0.73684211, -0.52631579, -0.31578947, -0.10526316,\n","         0.10526316,  0.31578947,  0.52631579,  0.73684211,  0.94736842,\n","         1.15789474,  1.36842105,  1.57894737,  1.78947368,  2.        ]),\n"," <a list of 19 Patch objects>)"]},"metadata":{},"execution_count":57},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# visualize the distributions on the 2D space\n","plt.plot(X_train[Y_train[:,0]==0,330],X_train[Y_train[:,0]==0,447],'b.', alpha=0.5)\n","plt.plot(X_train[Y_train[:,0]==1,330],X_train[Y_train[:,0]==1,447],'r.', alpha=0.5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"6RqhAwziOh-P","executionInfo":{"status":"ok","timestamp":1651521036215,"user_tz":240,"elapsed":725,"user":{"displayName":"Wen Jian","userId":"18293499394767959408"}},"outputId":"42289be5-058d-4651-f93e-a384ea1aef79"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f7e78a0f8d0>]"]},"metadata":{},"execution_count":81},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["predictions = mlp.predict(X_train[:,:100]) \n","\n","print(\"Predictions:\", predictions)\n","\n","# evaluation of algorithm performance in classifying noun vs. verb\n","print(confusion_matrix(Y_train,predictions))  \n","print(classification_report(Y_train,predictions))  "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u-8VuNs7MphM","executionInfo":{"status":"ok","timestamp":1651520420629,"user_tz":240,"elapsed":409,"user":{"displayName":"Wen Jian","userId":"18293499394767959408"}},"outputId":"ab1ba69f-b0ed-4115-f6e2-841c55ff33e7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Predictions: [0 0 0 ... 0 0 0]\n","[[2195  940]\n"," [1023 2062]]\n","              precision    recall  f1-score   support\n","\n","           0       0.68      0.70      0.69      3135\n","           1       0.69      0.67      0.68      3085\n","\n","    accuracy                           0.68      6220\n","   macro avg       0.68      0.68      0.68      6220\n","weighted avg       0.68      0.68      0.68      6220\n","\n"]}]},{"cell_type":"code","source":["mlp"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"k50jbdZZRiD1","executionInfo":{"status":"ok","timestamp":1651520285674,"user_tz":240,"elapsed":408,"user":{"displayName":"Wen Jian","userId":"18293499394767959408"}},"outputId":"98813739-d04f-4a06-9dbc-f30551c81e30"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["MLPClassifier(hidden_layer_sizes=(10, 10), max_iter=5000)"]},"metadata":{},"execution_count":68}]},{"cell_type":"markdown","source":["##1.2. A hand-built MLP for 1D input data  \n","\n","*   Code adapted from https://github.com/Fodark/mlp-python\n"],"metadata":{"id":"JSepW78vwLfd"}},{"cell_type":"code","source":["# Mlp model class & building blocks\n","import numpy as np\n","import math\n","import operator\n","import re\n","\n","class Mlp:\n","    def __init__(self, init_nodes: int = 0, learning_rate: float = .2) -> None:\n","        self.number_of_nodes = []\n","        if init_nodes > 0:\n","            self.number_of_nodes.append(init_nodes)\n","        self.weights = []\n","        self.biases = []\n","        self.functions = []\n","        self.learning_rate = learning_rate\n","\n","    def add_layer(self, number_of_nodes: int, weights = None, bias = None, function=\"sigmoid\"):\n","        self.number_of_nodes.append(number_of_nodes)\n","        if not weights is None:\n","            self.weights.append(weights)\n","            self.functions.append(function)\n","        elif len(self.number_of_nodes) > 1:\n","            self.weights.append(np.random.randn(self.number_of_nodes[-1], self.number_of_nodes[-2]) * np.sqrt(2 / (self.number_of_nodes[-1] + self.number_of_nodes[-2])))\n","            self.functions.append(function)\n","\n","        if not bias is None:\n","            self.biases.append(bias)\n","        elif len(self.number_of_nodes) > 1:\n","            self.biases.append(np.random.uniform(0, 0, size=(number_of_nodes, 1)))\n","    \n","    @staticmethod\n","    def soft_plus(x):\n","        sp = np.vectorize(lambda y: math.log(1 + math.exp(y)))\n","        return sp(x)\n","\n","    @staticmethod\n","    def relu(x):\n","        re = np.vectorize(lambda y: max(0, y))\n","        return re(x)\n","\n","    @staticmethod\n","    def sigmoid(x):\n","        sig = np.vectorize(lambda y:  (1 - 1 / (1 + math.exp(y))) if y < 0 else  (1 / (1 + math.exp(-y))))\n","        return sig(x)\n","    \n","    @staticmethod\n","    def squash(x, function):\n","        if function == \"sigmoid\":\n","            return Mlp.sigmoid(x)\n","        elif function == \"soft_plus\":\n","            return Mlp.soft_plus(x)\n","        elif function == \"relu\":\n","            return Mlp.relu(x)\n","\n","    @staticmethod\n","    def derivative(x, function):\n","        if function == \"sigmoid\":\n","            return np.multiply(x, (1-x))\n","        elif function == \"soft_plus\":\n","            return Mlp.sigmoid(x)\n","        elif function == \"relu\":\n","            d_relu = np.vectorize(lambda y: 1 if y > 0 else 0)\n","            return d_relu(x)\n","\n","    def feed_forward(self, inp):\n","        outputs = [np.matrix(inp).T]\n","\n","        for i in range(len(self.number_of_nodes) - 1):\n","            outputs.append(Mlp.squash((np.dot(self.weights[i], outputs[-1]) + self.biases[i]), self.functions[i]))\n","\n","        return outputs\n","\n","    # This training function uses stochastic gradient descent instead of batch\n","    def train(self, inp, targets):\n","        targets = np.matrix(targets).T\n","        # Calculate output with given input\n","        outputs = self.feed_forward(inp)\n","\n","        # Calculate each layer error\n","        errors = [np.subtract(targets, outputs[-1])]\n","        for i in range(len(self.weights) - 1):\n","            errors.insert(0, np.dot(self.weights[-1-i].T, errors[0]))\n","\n","        for i in range(len(self.weights)):\n","            # Calculate gradient and weight correction\n","            gradient = np.multiply(errors[-1-i], Mlp.derivative(outputs[-1-i], self.functions[-1-i]))\n","            gradient *= self.learning_rate\n","            self.biases[-1-i] += gradient\n","            delta_w  = np.dot(gradient, outputs[-2-i].T)\n","            self.weights[-1-i] += delta_w\n","\n","    def predict(self, inp):\n","        output = self.feed_forward(inp)[-1]\n","        output = dict(enumerate(output.A1))\n","        out_class = max(output.items(), key=operator.itemgetter(1))[0]\n","        out_prob = output[out_class]\n","        \n","        return out_class, out_prob"],"metadata":{"id":"9XDVjC3eu7I4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","import sklearn\n","from sklearn.model_selection import train_test_split \n","\n","# train & test the model\n","def ocr(training_population, testing_population):\n","    # print(\"Loading data...\")\n","    alldata = pd.read_csv(\"Adults_NV800.csv\")\n","    alldata = process_df(alldata)\n","    train_set, test_set = train_test_split(alldata, test_size = 0.20)\n","    print(\"Loaded {} rows for training.\".format(train_set.shape[0]))\n","    print(\"Loaded {} rows for testing.\".format(test_set.shape[0]))\n","    nn = Mlp(init_nodes=480, learning_rate=.05)\n","    nn.add_layer(300)\n","    nn.add_layer(150, function=\"relu\")\n","    nn.add_layer(2)\n","\n","    print(\"Training the network with {} samples...\".format(training_population))\n","    for i in range(training_population):\n","        data = train_set.sample(n=1) # sample a row from the training set\n","        label = int(data[\"POS\"].tolist()[0])\n","        inputs = list(data.iloc[0, 1:]) # \"input\" is a list of 480 signal values for a sample word\n","        outputs = [0] * 2\n","        outputs[label] = 1 #e.g. the \"output\" for a verb (\"1\") is [0 1]\n","        nn.train(inputs, outputs)\n","\n","    print(\"Trained successfully.\")\n","    # nn.save(\"ocr.mlp\")\n","    print(\"Testing with {} samples...\".format(testing_population))\n","    c_m = np.zeros(shape=(2, 2))\n","    for i in range(testing_population):\n","        data = test_set.sample(n=1)\n","        inputs = list(data.iloc[0, 1:])\n","        label = data[\"POS\"].tolist()[0]\n","        out_class, out_prob = nn.predict(inputs)\n","        c_m[label][out_class] += 1\n","\n","    print(\"Results:\")\n","\n","    correct_guesses = np.sum(np.diagonal(c_m))\n","    total_guesses = c_m.sum()\n","    accuracy = correct_guesses / total_guesses\n","\n","    recall = 0\n","    precision = 0\n","    c_m_t = c_m.T\n","\n","    for i in range(2):\n","        correct_guesses = c_m[i][i]\n","        total_row = np.sum(c_m[i])\n","        total_col = np.sum(c_m_t[i])\n","        recall += (correct_guesses / total_row) if total_row > 0 else 0\n","        precision += (correct_guesses / total_col) if total_col > 0 else 0\n","    \n","    recall = recall / 2\n","    precision = precision / 2\n","    print(\"\\tRecall: {0:.2f}\\n\\tPrecision: {0:.2f}\\n\\tAccuracy: {0:.2f}\".format(recall, precision, accuracy))\n","\n","\n","# def filter_pixel(x):\n","#     return x / 255\n","\n","def process_df(df):\n","    df = df.replace({'Noun': 0, 'Verb': 1}, value=None)\n","    df.dropna(inplace = True) # remove empty rows\n","    labels = df[\"POS\"]\n","    df = df.drop([\"Item\", \"POS\", \"Subject\"], axis=1)\n","    # df = df.apply(np.vectorize)\n","    df = pd.concat([labels, df], axis=1)\n","    print(df.head())\n","    return df\n","\n","ocr(training_population=6107, testing_population=1527)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4LxTVKuZyjsp","executionInfo":{"status":"ok","timestamp":1651437903646,"user_tz":240,"elapsed":28579,"user":{"displayName":"Wen Jian","userId":"18293499394767959408"}},"outputId":"11d70e35-b120-4f51-9585-17e027f4aad6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   POS  C3_X0  C3_X50  C3_X100  C3_X150  C3_X200  C3_X250  C3_X300  C3_X350  \\\n","0    1   2.92    0.72    -3.75   -11.04     4.27     0.42    -1.72     1.32   \n","1    0   2.77   -5.59   -10.34    -9.36   -13.63   -10.27    -9.06    -8.99   \n","2    0   0.82   -6.92     0.27     0.78    -3.18     6.26     3.39     5.39   \n","3    1  -6.18    3.29     0.62     5.28     0.05    11.24     5.41     6.93   \n","4    0  -4.35    1.60     4.04    -6.23    -9.56    -4.41    -8.07    -5.66   \n","\n","   C3_X400  ...  T8_X300  T8_X350  T8_X400  T8_X450  T8_X500  T8_X550  \\\n","0     3.93  ...    -4.14     0.12    -1.47    -2.76     2.35    -0.28   \n","1   -15.16  ...    -0.71     2.25    -5.23    -4.89    -8.51    -9.48   \n","2    -1.54  ...     5.28     4.60     1.28     5.77     7.88     3.60   \n","3    -0.24  ...    -2.11    -2.48    -1.24     0.98    -3.57     0.66   \n","4    -9.79  ...    -3.38    -1.25    -1.50    -4.18    -6.23    -0.21   \n","\n","   T8_X600  T8_X650  T8_X700  T8_X750  \n","0    -5.81    -5.25    -2.02     0.94  \n","1     1.25     8.48     4.51    -3.91  \n","2     5.39     4.05     4.50    -0.65  \n","3    -1.21     2.99    -0.59     1.18  \n","4    -1.48    -1.96     0.25    -2.83  \n","\n","[5 rows x 481 columns]\n","Loaded 6107 rows for training.\n","Loaded 1527 rows for testing.\n","Training the network with 6107 samples...\n","Trained successfully.\n","Testing with 1527 samples...\n","Results:\n","\tRecall: 0.50\n","\tPrecision: 0.50\n","\tAccuracy: 0.50\n"]}]},{"cell_type":"markdown","source":["##1.3. MLP for 1D input at different time points \n"],"metadata":{"id":"bA6f1b6cCz7N"}},{"cell_type":"code","source":["import pandas as pd\n","import sklearn\n","from sklearn import preprocessing\n","from sklearn.model_selection import train_test_split \n","from sklearn.preprocessing import StandardScaler  \n","from sklearn.neural_network import MLPClassifier \n","from sklearn.metrics import classification_report, confusion_matrix"],"metadata":{"id":"ODDzIzMbCiFi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Rerun \"Import data\" cell at Section 0\n","# Build a list that stores all signals at 16 different time points (0ms-750ms)\n","dataByTime = np.empty([16, X_3D.shape[0], 30])\n","for i in range(16):\n","  timeX = np.empty([X_3D.shape[0], 30])\n","  for j in range(30):\n","    timeX[:,j] = X_3D[:,j,i] #X_3D[word/sample][node][time]\n","  dataByTime[i] = timeX\n","print(\"Data reshaped by time:\", np.shape(dataByTime)) #(16, 7775, 30)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"waA3GQXhuW3P","executionInfo":{"status":"ok","timestamp":1651456100853,"user_tz":240,"elapsed":180,"user":{"displayName":"Wen Jian","userId":"18293499394767959408"}},"outputId":"2c63e2af-638f-4319-f5e4-65f9d6bfe06c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(16, 7775, 30)\n"]}]},{"cell_type":"code","source":["def sk_mlp(sub_X_3D, Y):\n","  # split data into train and test (80% of dataset into training set and other 20% into test data)\n","  X_train, X_test, Y_train, Y_test = train_test_split(sub_X_3D, Y, test_size = 0.20)  \n","  # Feature scaling\n","  scaler = StandardScaler()  \n","  scaler.fit(X_train)\n","  X_train = scaler.transform(X_train)  \n","  X_test = scaler.transform(X_test) \n","  Y_train_ravel = Y_train.ravel() #equivalent to .reshape(-1)\n","\n","  # Call the MLP\n","  mlp = MLPClassifier(hidden_layer_sizes=(10, 10, 10), max_iter=1000)  \n","  mlp.fit(X_train, Y_train_ravel)  \n","\n","  predictions = mlp.predict(X_test) \n","\n","  print(predictions)\n","\n","  # evaluation of algorithm performance in classifying noun vs. verb\n","  print(confusion_matrix(Y_test,predictions))  \n","  print(classification_report(Y_test,predictions)) \n"],"metadata":{"id":"Q7kqwSltihjw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# pass data of each time point into the model function\n","for time_x in range(dataByTime.shape[0]):\n","  print(\"MLP Model {} at timepoint {}:\".format(time_x + 1, time_x * 50))\n","  sk_mlp(dataByTime[time_x], Y) "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WcyVYo8fdXWL","executionInfo":{"status":"ok","timestamp":1651457260416,"user_tz":240,"elapsed":115934,"user":{"displayName":"Wen Jian","userId":"18293499394767959408"}},"outputId":"090678ec-3892-486f-c489-b0d7e81a551b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["MLP Model 1 at timepoint 0:\n","[1 0 0 ... 1 0 0]\n","[[375 435]\n"," [370 375]]\n","              precision    recall  f1-score   support\n","\n","           0       0.50      0.46      0.48       810\n","           1       0.46      0.50      0.48       745\n","\n","    accuracy                           0.48      1555\n","   macro avg       0.48      0.48      0.48      1555\n","weighted avg       0.48      0.48      0.48      1555\n","\n","MLP Model 2 at timepoint 50:\n","[1 0 1 ... 0 0 0]\n","[[414 373]\n"," [396 372]]\n","              precision    recall  f1-score   support\n","\n","           0       0.51      0.53      0.52       787\n","           1       0.50      0.48      0.49       768\n","\n","    accuracy                           0.51      1555\n","   macro avg       0.51      0.51      0.51      1555\n","weighted avg       0.51      0.51      0.51      1555\n","\n","MLP Model 3 at timepoint 100:\n","[0 1 0 ... 1 0 0]\n","[[387 361]\n"," [429 378]]\n","              precision    recall  f1-score   support\n","\n","           0       0.47      0.52      0.49       748\n","           1       0.51      0.47      0.49       807\n","\n","    accuracy                           0.49      1555\n","   macro avg       0.49      0.49      0.49      1555\n","weighted avg       0.49      0.49      0.49      1555\n","\n","MLP Model 4 at timepoint 150:\n","[0 0 1 ... 1 0 1]\n","[[346 465]\n"," [302 442]]\n","              precision    recall  f1-score   support\n","\n","           0       0.53      0.43      0.47       811\n","           1       0.49      0.59      0.54       744\n","\n","    accuracy                           0.51      1555\n","   macro avg       0.51      0.51      0.50      1555\n","weighted avg       0.51      0.51      0.50      1555\n","\n","MLP Model 5 at timepoint 200:\n","[0 0 1 ... 1 1 1]\n","[[409 374]\n"," [407 365]]\n","              precision    recall  f1-score   support\n","\n","           0       0.50      0.52      0.51       783\n","           1       0.49      0.47      0.48       772\n","\n","    accuracy                           0.50      1555\n","   macro avg       0.50      0.50      0.50      1555\n","weighted avg       0.50      0.50      0.50      1555\n","\n","MLP Model 6 at timepoint 250:\n","[0 0 0 ... 0 0 0]\n","[[444 332]\n"," [440 339]]\n","              precision    recall  f1-score   support\n","\n","           0       0.50      0.57      0.53       776\n","           1       0.51      0.44      0.47       779\n","\n","    accuracy                           0.50      1555\n","   macro avg       0.50      0.50      0.50      1555\n","weighted avg       0.50      0.50      0.50      1555\n","\n","MLP Model 7 at timepoint 300:\n","[1 1 0 ... 0 1 1]\n","[[399 390]\n"," [382 384]]\n","              precision    recall  f1-score   support\n","\n","           0       0.51      0.51      0.51       789\n","           1       0.50      0.50      0.50       766\n","\n","    accuracy                           0.50      1555\n","   macro avg       0.50      0.50      0.50      1555\n","weighted avg       0.50      0.50      0.50      1555\n","\n","MLP Model 8 at timepoint 350:\n","[0 1 0 ... 1 0 1]\n","[[385 393]\n"," [365 412]]\n","              precision    recall  f1-score   support\n","\n","           0       0.51      0.49      0.50       778\n","           1       0.51      0.53      0.52       777\n","\n","    accuracy                           0.51      1555\n","   macro avg       0.51      0.51      0.51      1555\n","weighted avg       0.51      0.51      0.51      1555\n","\n","MLP Model 9 at timepoint 400:\n","[1 0 1 ... 1 0 0]\n","[[408 376]\n"," [387 384]]\n","              precision    recall  f1-score   support\n","\n","           0       0.51      0.52      0.52       784\n","           1       0.51      0.50      0.50       771\n","\n","    accuracy                           0.51      1555\n","   macro avg       0.51      0.51      0.51      1555\n","weighted avg       0.51      0.51      0.51      1555\n","\n","MLP Model 10 at timepoint 450:\n","[0 1 0 ... 0 0 1]\n","[[433 363]\n"," [382 377]]\n","              precision    recall  f1-score   support\n","\n","           0       0.53      0.54      0.54       796\n","           1       0.51      0.50      0.50       759\n","\n","    accuracy                           0.52      1555\n","   macro avg       0.52      0.52      0.52      1555\n","weighted avg       0.52      0.52      0.52      1555\n","\n","MLP Model 11 at timepoint 500:\n","[1 1 0 ... 0 0 0]\n","[[441 321]\n"," [439 354]]\n","              precision    recall  f1-score   support\n","\n","           0       0.50      0.58      0.54       762\n","           1       0.52      0.45      0.48       793\n","\n","    accuracy                           0.51      1555\n","   macro avg       0.51      0.51      0.51      1555\n","weighted avg       0.51      0.51      0.51      1555\n","\n","MLP Model 12 at timepoint 550:\n","[0 0 0 ... 1 0 1]\n","[[422 378]\n"," [403 352]]\n","              precision    recall  f1-score   support\n","\n","           0       0.51      0.53      0.52       800\n","           1       0.48      0.47      0.47       755\n","\n","    accuracy                           0.50      1555\n","   macro avg       0.50      0.50      0.50      1555\n","weighted avg       0.50      0.50      0.50      1555\n","\n","MLP Model 13 at timepoint 600:\n","[0 1 0 ... 1 1 0]\n","[[387 405]\n"," [375 388]]\n","              precision    recall  f1-score   support\n","\n","           0       0.51      0.49      0.50       792\n","           1       0.49      0.51      0.50       763\n","\n","    accuracy                           0.50      1555\n","   macro avg       0.50      0.50      0.50      1555\n","weighted avg       0.50      0.50      0.50      1555\n","\n","MLP Model 14 at timepoint 650:\n","[0 1 1 ... 0 1 0]\n","[[385 369]\n"," [361 440]]\n","              precision    recall  f1-score   support\n","\n","           0       0.52      0.51      0.51       754\n","           1       0.54      0.55      0.55       801\n","\n","    accuracy                           0.53      1555\n","   macro avg       0.53      0.53      0.53      1555\n","weighted avg       0.53      0.53      0.53      1555\n","\n","MLP Model 15 at timepoint 700:\n","[1 1 0 ... 1 0 0]\n","[[389 374]\n"," [356 436]]\n","              precision    recall  f1-score   support\n","\n","           0       0.52      0.51      0.52       763\n","           1       0.54      0.55      0.54       792\n","\n","    accuracy                           0.53      1555\n","   macro avg       0.53      0.53      0.53      1555\n","weighted avg       0.53      0.53      0.53      1555\n","\n","MLP Model 16 at timepoint 750:\n","[0 0 0 ... 1 0 1]\n","[[365 410]\n"," [352 428]]\n","              precision    recall  f1-score   support\n","\n","           0       0.51      0.47      0.49       775\n","           1       0.51      0.55      0.53       780\n","\n","    accuracy                           0.51      1555\n","   macro avg       0.51      0.51      0.51      1555\n","weighted avg       0.51      0.51      0.51      1555\n","\n"]}]},{"cell_type":"markdown","source":["##1.4. MLP for 1D input at different electrodes "],"metadata":{"id":"uF61t6cDhzvx"}},{"cell_type":"code","source":["# Build a list that stores all signals at 30 different electrode locations\n","dataBySpace = np.empty([30, X_3D.shape[0], 16])\n","for i in range(30):\n","  nodeX = np.empty([X_3D.shape[0], 16])\n","  for j in range(16):\n","    nodeX[:,j] = X_3D[:,i,j] #X_3D[word/sample][node][time]\n","  dataBySpace[i] = nodeX\n","print(\"Data reshaped by location:\", np.shape(dataBySpace)) #(30, 7775, 16)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8ILVPfPehzCB","executionInfo":{"status":"ok","timestamp":1651521581371,"user_tz":240,"elapsed":560,"user":{"displayName":"Wen Jian","userId":"18293499394767959408"}},"outputId":"555116b5-a90f-498c-9fd2-fe39356854b3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Data reshaped by location: (30, 7775, 16)\n"]}]},{"cell_type":"code","source":["for node_x in range(dataBySpace.shape[0]):\n","  print(\"MLP Model {} at electrod {}:\".format(node_x + 1, node_x + 1))\n","  sk_mlp(dataBySpace[node_x], Y) "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5yZMEPamjGwA","executionInfo":{"status":"ok","timestamp":1651524922732,"user_tz":240,"elapsed":240417,"user":{"displayName":"Wen Jian","userId":"18293499394767959408"}},"outputId":"0d34488c-d03d-4c28-927e-53cad054fc05"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["MLP Model 1 at electrod 1:\n","[0 1 0 ... 1 1 1]\n","[[428 349]\n"," [393 385]]\n","              precision    recall  f1-score   support\n","\n","           0       0.52      0.55      0.54       777\n","           1       0.52      0.49      0.51       778\n","\n","    accuracy                           0.52      1555\n","   macro avg       0.52      0.52      0.52      1555\n","weighted avg       0.52      0.52      0.52      1555\n","\n","MLP Model 2 at electrod 2:\n","[0 1 0 ... 0 0 0]\n","[[396 416]\n"," [338 405]]\n","              precision    recall  f1-score   support\n","\n","           0       0.54      0.49      0.51       812\n","           1       0.49      0.55      0.52       743\n","\n","    accuracy                           0.52      1555\n","   macro avg       0.52      0.52      0.52      1555\n","weighted avg       0.52      0.52      0.51      1555\n","\n","MLP Model 3 at electrod 3:\n","[0 1 1 ... 0 0 1]\n","[[428 350]\n"," [417 360]]\n","              precision    recall  f1-score   support\n","\n","           0       0.51      0.55      0.53       778\n","           1       0.51      0.46      0.48       777\n","\n","    accuracy                           0.51      1555\n","   macro avg       0.51      0.51      0.51      1555\n","weighted avg       0.51      0.51      0.51      1555\n","\n","MLP Model 4 at electrod 4:\n","[0 0 1 ... 1 0 1]\n","[[412 381]\n"," [402 360]]\n","              precision    recall  f1-score   support\n","\n","           0       0.51      0.52      0.51       793\n","           1       0.49      0.47      0.48       762\n","\n","    accuracy                           0.50      1555\n","   macro avg       0.50      0.50      0.50      1555\n","weighted avg       0.50      0.50      0.50      1555\n","\n","MLP Model 5 at electrod 5:\n","[1 0 0 ... 1 0 1]\n","[[398 353]\n"," [396 408]]\n","              precision    recall  f1-score   support\n","\n","           0       0.50      0.53      0.52       751\n","           1       0.54      0.51      0.52       804\n","\n","    accuracy                           0.52      1555\n","   macro avg       0.52      0.52      0.52      1555\n","weighted avg       0.52      0.52      0.52      1555\n","\n","MLP Model 6 at electrod 6:\n","[0 1 0 ... 0 1 0]\n","[[396 380]\n"," [365 414]]\n","              precision    recall  f1-score   support\n","\n","           0       0.52      0.51      0.52       776\n","           1       0.52      0.53      0.53       779\n","\n","    accuracy                           0.52      1555\n","   macro avg       0.52      0.52      0.52      1555\n","weighted avg       0.52      0.52      0.52      1555\n","\n","MLP Model 7 at electrod 7:\n","[1 1 1 ... 0 0 0]\n","[[350 417]\n"," [360 428]]\n","              precision    recall  f1-score   support\n","\n","           0       0.49      0.46      0.47       767\n","           1       0.51      0.54      0.52       788\n","\n","    accuracy                           0.50      1555\n","   macro avg       0.50      0.50      0.50      1555\n","weighted avg       0.50      0.50      0.50      1555\n","\n","MLP Model 8 at electrod 8:\n","[0 1 0 ... 0 1 0]\n","[[465 340]\n"," [417 333]]\n","              precision    recall  f1-score   support\n","\n","           0       0.53      0.58      0.55       805\n","           1       0.49      0.44      0.47       750\n","\n","    accuracy                           0.51      1555\n","   macro avg       0.51      0.51      0.51      1555\n","weighted avg       0.51      0.51      0.51      1555\n","\n","MLP Model 9 at electrod 9:\n","[1 1 0 ... 0 0 1]\n","[[436 348]\n"," [435 336]]\n","              precision    recall  f1-score   support\n","\n","           0       0.50      0.56      0.53       784\n","           1       0.49      0.44      0.46       771\n","\n","    accuracy                           0.50      1555\n","   macro avg       0.50      0.50      0.49      1555\n","weighted avg       0.50      0.50      0.49      1555\n","\n","MLP Model 10 at electrod 10:\n","[0 1 0 ... 1 1 1]\n","[[425 411]\n"," [348 371]]\n","              precision    recall  f1-score   support\n","\n","           0       0.55      0.51      0.53       836\n","           1       0.47      0.52      0.49       719\n","\n","    accuracy                           0.51      1555\n","   macro avg       0.51      0.51      0.51      1555\n","weighted avg       0.51      0.51      0.51      1555\n","\n","MLP Model 11 at electrod 11:\n","[1 0 1 ... 0 1 0]\n","[[440 325]\n"," [462 328]]\n","              precision    recall  f1-score   support\n","\n","           0       0.49      0.58      0.53       765\n","           1       0.50      0.42      0.45       790\n","\n","    accuracy                           0.49      1555\n","   macro avg       0.50      0.50      0.49      1555\n","weighted avg       0.50      0.49      0.49      1555\n","\n","MLP Model 12 at electrod 12:\n","[1 1 0 ... 1 1 0]\n","[[430 330]\n"," [423 372]]\n","              precision    recall  f1-score   support\n","\n","           0       0.50      0.57      0.53       760\n","           1       0.53      0.47      0.50       795\n","\n","    accuracy                           0.52      1555\n","   macro avg       0.52      0.52      0.52      1555\n","weighted avg       0.52      0.52      0.51      1555\n","\n","MLP Model 13 at electrod 13:\n","[0 0 1 ... 1 0 1]\n","[[414 342]\n"," [442 357]]\n","              precision    recall  f1-score   support\n","\n","           0       0.48      0.55      0.51       756\n","           1       0.51      0.45      0.48       799\n","\n","    accuracy                           0.50      1555\n","   macro avg       0.50      0.50      0.50      1555\n","weighted avg       0.50      0.50      0.49      1555\n","\n","MLP Model 14 at electrod 14:\n","[0 0 0 ... 0 0 0]\n","[[449 339]\n"," [436 331]]\n","              precision    recall  f1-score   support\n","\n","           0       0.51      0.57      0.54       788\n","           1       0.49      0.43      0.46       767\n","\n","    accuracy                           0.50      1555\n","   macro avg       0.50      0.50      0.50      1555\n","weighted avg       0.50      0.50      0.50      1555\n","\n","MLP Model 15 at electrod 15:\n","[1 1 0 ... 1 0 0]\n","[[478 321]\n"," [437 319]]\n","              precision    recall  f1-score   support\n","\n","           0       0.52      0.60      0.56       799\n","           1       0.50      0.42      0.46       756\n","\n","    accuracy                           0.51      1555\n","   macro avg       0.51      0.51      0.51      1555\n","weighted avg       0.51      0.51      0.51      1555\n","\n","MLP Model 16 at electrod 16:\n","[1 1 1 ... 0 0 0]\n","[[376 400]\n"," [379 400]]\n","              precision    recall  f1-score   support\n","\n","           0       0.50      0.48      0.49       776\n","           1       0.50      0.51      0.51       779\n","\n","    accuracy                           0.50      1555\n","   macro avg       0.50      0.50      0.50      1555\n","weighted avg       0.50      0.50      0.50      1555\n","\n","MLP Model 17 at electrod 17:\n","[1 0 1 ... 0 1 0]\n","[[339 428]\n"," [346 442]]\n","              precision    recall  f1-score   support\n","\n","           0       0.49      0.44      0.47       767\n","           1       0.51      0.56      0.53       788\n","\n","    accuracy                           0.50      1555\n","   macro avg       0.50      0.50      0.50      1555\n","weighted avg       0.50      0.50      0.50      1555\n","\n","MLP Model 18 at electrod 18:\n","[1 0 0 ... 0 1 0]\n","[[385 375]\n"," [400 395]]\n","              precision    recall  f1-score   support\n","\n","           0       0.49      0.51      0.50       760\n","           1       0.51      0.50      0.50       795\n","\n","    accuracy                           0.50      1555\n","   macro avg       0.50      0.50      0.50      1555\n","weighted avg       0.50      0.50      0.50      1555\n","\n","MLP Model 19 at electrod 19:\n","[0 0 1 ... 0 0 0]\n","[[418 337]\n"," [490 310]]\n","              precision    recall  f1-score   support\n","\n","           0       0.46      0.55      0.50       755\n","           1       0.48      0.39      0.43       800\n","\n","    accuracy                           0.47      1555\n","   macro avg       0.47      0.47      0.47      1555\n","weighted avg       0.47      0.47      0.46      1555\n","\n","MLP Model 20 at electrod 20:\n","[1 0 1 ... 0 0 0]\n","[[454 313]\n"," [459 329]]\n","              precision    recall  f1-score   support\n","\n","           0       0.50      0.59      0.54       767\n","           1       0.51      0.42      0.46       788\n","\n","    accuracy                           0.50      1555\n","   macro avg       0.50      0.50      0.50      1555\n","weighted avg       0.50      0.50      0.50      1555\n","\n","MLP Model 21 at electrod 21:\n","[1 1 0 ... 0 0 0]\n","[[396 374]\n"," [409 376]]\n","              precision    recall  f1-score   support\n","\n","           0       0.49      0.51      0.50       770\n","           1       0.50      0.48      0.49       785\n","\n","    accuracy                           0.50      1555\n","   macro avg       0.50      0.50      0.50      1555\n","weighted avg       0.50      0.50      0.50      1555\n","\n","MLP Model 22 at electrod 22:\n","[0 0 1 ... 0 0 0]\n","[[397 376]\n"," [392 390]]\n","              precision    recall  f1-score   support\n","\n","           0       0.50      0.51      0.51       773\n","           1       0.51      0.50      0.50       782\n","\n","    accuracy                           0.51      1555\n","   macro avg       0.51      0.51      0.51      1555\n","weighted avg       0.51      0.51      0.51      1555\n","\n","MLP Model 23 at electrod 23:\n","[0 0 0 ... 0 0 0]\n","[[467 317]\n"," [432 339]]\n","              precision    recall  f1-score   support\n","\n","           0       0.52      0.60      0.55       784\n","           1       0.52      0.44      0.48       771\n","\n","    accuracy                           0.52      1555\n","   macro avg       0.52      0.52      0.52      1555\n","weighted avg       0.52      0.52      0.52      1555\n","\n","MLP Model 24 at electrod 24:\n","[1 0 1 ... 0 1 0]\n","[[387 392]\n"," [395 381]]\n","              precision    recall  f1-score   support\n","\n","           0       0.49      0.50      0.50       779\n","           1       0.49      0.49      0.49       776\n","\n","    accuracy                           0.49      1555\n","   macro avg       0.49      0.49      0.49      1555\n","weighted avg       0.49      0.49      0.49      1555\n","\n","MLP Model 25 at electrod 25:\n","[0 0 1 ... 0 0 0]\n","[[426 336]\n"," [421 372]]\n","              precision    recall  f1-score   support\n","\n","           0       0.50      0.56      0.53       762\n","           1       0.53      0.47      0.50       793\n","\n","    accuracy                           0.51      1555\n","   macro avg       0.51      0.51      0.51      1555\n","weighted avg       0.51      0.51      0.51      1555\n","\n","MLP Model 26 at electrod 26:\n","[0 0 1 ... 0 0 0]\n","[[436 365]\n"," [412 342]]\n","              precision    recall  f1-score   support\n","\n","           0       0.51      0.54      0.53       801\n","           1       0.48      0.45      0.47       754\n","\n","    accuracy                           0.50      1555\n","   macro avg       0.50      0.50      0.50      1555\n","weighted avg       0.50      0.50      0.50      1555\n","\n","MLP Model 27 at electrod 27:\n","[0 0 0 ... 1 0 0]\n","[[417 295]\n"," [486 357]]\n","              precision    recall  f1-score   support\n","\n","           0       0.46      0.59      0.52       712\n","           1       0.55      0.42      0.48       843\n","\n","    accuracy                           0.50      1555\n","   macro avg       0.50      0.50      0.50      1555\n","weighted avg       0.51      0.50      0.50      1555\n","\n","MLP Model 28 at electrod 28:\n","[1 0 1 ... 1 1 1]\n","[[371 420]\n"," [306 458]]\n","              precision    recall  f1-score   support\n","\n","           0       0.55      0.47      0.51       791\n","           1       0.52      0.60      0.56       764\n","\n","    accuracy                           0.53      1555\n","   macro avg       0.53      0.53      0.53      1555\n","weighted avg       0.54      0.53      0.53      1555\n","\n","MLP Model 29 at electrod 29:\n","[1 0 0 ... 0 0 1]\n","[[478 353]\n"," [394 330]]\n","              precision    recall  f1-score   support\n","\n","           0       0.55      0.58      0.56       831\n","           1       0.48      0.46      0.47       724\n","\n","    accuracy                           0.52      1555\n","   macro avg       0.52      0.52      0.52      1555\n","weighted avg       0.52      0.52      0.52      1555\n","\n","MLP Model 30 at electrod 30:\n","[1 1 0 ... 0 0 1]\n","[[379 398]\n"," [343 435]]\n","              precision    recall  f1-score   support\n","\n","           0       0.52      0.49      0.51       777\n","           1       0.52      0.56      0.54       778\n","\n","    accuracy                           0.52      1555\n","   macro avg       0.52      0.52      0.52      1555\n","weighted avg       0.52      0.52      0.52      1555\n","\n"]}]},{"cell_type":"markdown","source":["# 1D CNN for Time Series Analysis\n","Code adapted from https://github.com/Gruschtel/1D-CNN"],"metadata":{"id":"shYftk4BILGx"}},{"cell_type":"code","source":["from __future__ import print_function\n","from keras.preprocessing import sequence\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Activation, Conv1D, GlobalMaxPooling1D, Embedding, Input\n","from keras.datasets import imdb\n","# from keras.utils import plot_model\n","from keras import optimizers\n","import matplotlib.pyplot as plt\n","import numpy as np\n","# Graphic output\n","from IPython.display import SVG\n","from keras.utils.vis_utils import model_to_dot"],"metadata":{"id":"dVpDZqfFwTLD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Rerun \"import data\" in section 0\n","# split data into train and test (80% of dataset into training set and other 20% into test data)\n","x_train, x_test, y_train, y_test = train_test_split(X_3D, Y, test_size = 0.20)  \n","print('x_train shape:', x_train.shape, 'y_train shape:', y_train.shape)\n","print('x_test shape:', x_test.shape, 'y_test shape:', y_test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6rKD-GGqNlcW","executionInfo":{"status":"ok","timestamp":1651519219298,"user_tz":240,"elapsed":416,"user":{"displayName":"Wen Jian","userId":"18293499394767959408"}},"outputId":"7095156c-7456-4c03-9f95-701cffa1ea8f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["x_train shape: (6220, 30, 16) y_train shape: (6220, 1)\n","x_test shape: (1555, 30, 16) y_test shape: (1555, 1)\n"]}]},{"cell_type":"code","source":["print('Build model...')\n","model = Sequential()\n","# embedding converts indices into dense vectors of fixed size\n","# model.add(Embedding(input_dim=6107,\n","#                     output_dim=50,\n","#                     input_length=480))\n","# model.add(Dropout(0.5)) # prevents the model from overfitting\n","model.add(Input(x_train.shape)) # input layer\n","model.add(Conv1D(filters=250,\n","                 kernel_size=3,\n","                 padding='valid',\n","                 activation='relu',\n","                 strides=1))\n","model.add(GlobalMaxPooling1D())\n","model.add(Dense(250)) # use the same dimensions as filters\n","model.add(Activation('relu'))\n","model.add(Dense(1, activation='sigmoid'))\n","\n","model.compile(loss='binary_crossentropy',\n","              optimizer='adam',\n","              metrics=['accuracy'])              \n","#model.summary()\n","SVG(model_to_dot(model,show_shapes = True).create(prog='dot', format='svg'))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":433},"id":"Lipv-B5P26M3","executionInfo":{"status":"error","timestamp":1651519287410,"user_tz":240,"elapsed":414,"user":{"displayName":"Wen Jian","userId":"18293499394767959408"}},"outputId":"a105de28-a57d-484a-c855-493bc7103118"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Build model...\n"]},{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-38-6a51fef5b73d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m                  \u001b[0mactivation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'relu'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m                  strides=1))\n\u001b[0;32m---> 14\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mGlobalMaxPooling1D\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mDense\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m250\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# use the same dimensions as filters\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mActivation\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'relu'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/training/tracking/base.py\u001b[0m in \u001b[0;36m_method_wrapper\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    627\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_self_setattr_tracking\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    628\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 629\u001b[0;31m       \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    630\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    631\u001b[0m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_self_setattr_tracking\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprevious_value\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/input_spec.py\u001b[0m in \u001b[0;36massert_input_compatibility\u001b[0;34m(input_spec, inputs, layer_name)\u001b[0m\n\u001b[1;32m    212\u001b[0m       \u001b[0mndim\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mshape\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrank\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    213\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mndim\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mspec\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 214\u001b[0;31m         raise ValueError(f'Input {input_index} of layer \"{layer_name}\" '\n\u001b[0m\u001b[1;32m    215\u001b[0m                          \u001b[0;34m'is incompatible with the layer: '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    216\u001b[0m                          \u001b[0;34mf'expected ndim={spec.ndim}, found ndim={ndim}. '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Input 0 of layer \"global_max_pooling1d_4\" is incompatible with the layer: expected ndim=3, found ndim=4. Full shape received: (None, 6220, 28, 250)"]}]},{"cell_type":"code","source":["# train the model\n","history = model.fit(x_train, y_train,\n","                    batch_size=32,\n","                    epochs=10,\n","                    validation_data=(x_test, y_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":659},"id":"XvTXTia86qyR","executionInfo":{"status":"error","timestamp":1651515749398,"user_tz":240,"elapsed":428,"user":{"displayName":"Wen Jian","userId":"18293499394767959408"}},"outputId":"b9b73596-a205-4c4f-8b85-c58f6b04e7c1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n"]},{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-16-46a4f28d2292>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m                     \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m32\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m                     \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m                     validation_data=(x_test, y_test))\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/framework/func_graph.py\u001b[0m in \u001b[0;36mautograph_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m   1145\u001b[0m           \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint:disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1146\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"ag_error_metadata\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1147\u001b[0;31m               \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mag_error_metadata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1148\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1149\u001b[0m               \u001b[0;32mraise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: in user code:\n\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1021, in train_function  *\n        return step_function(self, iterator)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1010, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1000, in run_step  **\n        outputs = model.train_step(data)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 859, in train_step\n        y_pred = self(x, training=True)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\", line 67, in error_handler\n        raise e.with_traceback(filtered_tb) from None\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/input_spec.py\", line 264, in assert_input_compatibility\n        raise ValueError(f'Input {input_index} of layer \"{layer_name}\" is '\n\n    ValueError: Input 0 of layer \"sequential_3\" is incompatible with the layer: expected shape=(None, 6107, 480), found shape=(None, 480)\n"]}]},{"cell_type":"code","source":["# evaluation data\n","history_dict = history.history\n","history_dict.keys()"],"metadata":{"id":"a1VAkyxo7Ank"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# plot train & validation loss & accuracy\n","val_loss = history.history['val_loss']\n","loss = history.history['loss']\n","accuracy = history.history['acc']\n","val_accuracy = history.history['val_acc']\n","\n","epochs = range(1, len(accuracy) + 1)\n","\n","plt.rcParams['figure.figsize'] = [10, 5]\n","plt.subplot(1, 2, 1)\n","plt.plot(epochs, loss, 'bo', label='Training loss', color='red')\n","plt.plot(epochs,val_loss , 'b', label='Validation loss', color='green')\n","plt.title('Training and validation loss')\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.legend()\n","\n","plt.subplot(1, 2, 2)\n","plt.plot(epochs, accuracy, 'bo', label='Training acc', color='red')\n","plt.plot(epochs, val_accuracy, 'b', label='Validation acc', color='green')\n","plt.title('Training and validation accuracy')\n","plt.xlabel('Epochs')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","plt.tight_layout()\n","plt.show()"],"metadata":{"id":"-Nl1fW7Q7IRQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Result Analysis -- Is the data really unclassifiable?"],"metadata":{"id":"XlhunAQ1kryD"}},{"cell_type":"code","source":["# the average time-variant data of a single electrode seems to be separable\n","xx=dataBySpace[1]\n","plt.plot(xx.mean(axis=0),'k-')\n","plt.plot(xx[Y[:,0]==0].mean(axis=0),'r-')\n","plt.plot(xx[Y[:,0]==1].mean(axis=0),'b-')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"yMkQ0poUXbwz","executionInfo":{"status":"ok","timestamp":1651521736362,"user_tz":240,"elapsed":450,"user":{"displayName":"Wen Jian","userId":"18293499394767959408"}},"outputId":"f3185fef-e018-4af8-c49a-171a8747bcce"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f7dbbefdcd0>]"]},"metadata":{},"execution_count":89},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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KVu2bPSZGovYoqLYL969u/Wy1EZRiDp25NF9kvBarZEGX5KpiYpi22zIpn/xxRckhKBDhw6ZJ/jTT3n17fPn1im4eTP/FadPT3Vo7ty5BIBOnTpFBw8Sde2azL2fikWLFpGLiwtVqFCBrltY67Zz587k6upKFy9etOh8U+jXrx+5urrSgxQXOIv4/HO+WFoZRaQ6S5bw9/rDDzbtVhp8SabH3599+fqIiIigYsWKUbly5cyLET91iv9C06ZZrlh0NN/uV6zIK0hTULt2bapUqRIpikJdu3J3W7caF7lnzx7KkycPeXl5mR16qsthP2bMGLPOM5erV6+SEIK+VWPCVZcpb9Uq62WpxZUrPBho1Miq6lWWIA2+JNMzaRL/2g1lRdi5cycBoB/MHY01asSZNC31m48fT4Yifq5evUoAaMqUKaQonGkBYC9BWly7do3Kly9Prq6utNjEoikvX76kkiVLUtmyZSlay4VlibRp04a8vLysju+nhAT+DtTKyGktsbFEb7/NSe/skApDGnxJpufECf61L19uuM17771HBQoUMK8k319/seA//jBfqZs3idzdOfujHsaMGUNCCLp79y5dusTd5MvHp5jion/+/Dk1a9aMANCwYcPSzIEzatQoAkC7d+82/71YwP79+wkAzVdjtezo0RyiqYaLyFqGDeMv66+/7NK9NPiSTE9CAq+47dbNcJtt27YRAFpqTqx0fDxRqVJcb9ZcPvyQczjrqWGqKAqVLFmSGjduTEREc+fyv1WXQHPhQtO6iIuLo379+hEAat26NUUYqM179uxZcnFxUWci1UQURSFfX18qW7as9ZPDV66Q1e41Ndi+nfX48ku7qSANvkRCnFOnYEHDodCKolDFihWpatWq5q0E/ekn/isdO2b6Of/+S3pXhCVy8OBBAkC///47ERF9/DF7LRSFEy3Wr296V0REc+bMIWdnZ6pSpQrdunUr2bGEhASqU6cO5c2bl0JtnHd/1apVBID+/vtv64XVrs3pFmycWO41jx8T5c/POqiRL8hCpMGXSIizZgKcRdMQv/76q/lujYgIIg8PIlNXpMbEEJUpw5sB91GfPn0oa9asFBERQfHxnIJFl0tNNx9hbhDOjh07KFeuXJQvXz46fPjw6/3z5s0jALRs2TLzBKrAq1evqEiRIuTn52e9sHnz+IOxZZEaHQkJXIDB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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["But HUGE noise relative to signal!"],"metadata":{"id":"KDVitT8GmSlM"}},{"cell_type":"code","source":["#visualize the std of the first electrod\n","xx=dataBySpace[0]\n","ii=np.arange(xx.shape[1])\n","\n","plt.subplot(131)\n","plt.errorbar(ii,xx.mean(axis=0),xx.std(axis=0)) #Mean\n","plt.subplot(132)\n","plt.errorbar(ii,xx[Y[:,0]==0].mean(axis=0),xx[Y[:,0]==0].std(axis=0)) #Noun\n","plt.subplot(133)\n","plt.errorbar(ii,xx[Y[:,0]==1].mean(axis=0),xx[Y[:,0]==1].std(axis=0)) #Verb"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"0ozuXzFiWrdK","executionInfo":{"status":"ok","timestamp":1651521985090,"user_tz":240,"elapsed":1041,"user":{"displayName":"Wen Jian","userId":"18293499394767959408"}},"outputId":"d941f2d6-cfca-4e57-c5c9-3c36a916d93a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<ErrorbarContainer object of 3 artists>"]},"metadata":{},"execution_count":97},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 3 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["xx.std(axis=0).shape, ii.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uu_ppYOQX3GO","executionInfo":{"status":"ok","timestamp":1651521920700,"user_tz":240,"elapsed":431,"user":{"displayName":"Wen Jian","userId":"18293499394767959408"}},"outputId":"802d41db-8a07-4567-b85e-653498f9b8e4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((16,), (16,))"]},"metadata":{},"execution_count":94}]},{"cell_type":"code","source":["# datapoints (out of 480 dimensions) that are close to each other seem to look alike\n","plt.subplot(121)\n","plt.plot(xx[Y[:,0]==0,:][270:300])\n","plt.subplot(122)\n","plt.plot(xx[Y[:,0]==1,:][270:300])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":543},"id":"E4xDLXERa39K","executionInfo":{"status":"ok","timestamp":1651522810838,"user_tz":240,"elapsed":1119,"user":{"displayName":"Wen Jian","userId":"18293499394767959408"}},"outputId":"540f0147-4190-41ab-9f3a-6744d0662a94"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f7dbbeb3a50>,\n"," <matplotlib.lines.Line2D at 0x7f7dbbeb37d0>,\n"," <matplotlib.lines.Line2D at 0x7f7dbbe0b450>,\n"," <matplotlib.lines.Line2D at 0x7f7dbbe0b310>,\n"," <matplotlib.lines.Line2D at 0x7f7dbbe0b390>,\n"," <matplotlib.lines.Line2D at 0x7f7dbbe86c10>,\n"," <matplotlib.lines.Line2D at 0x7f7dbbe86410>,\n"," <matplotlib.lines.Line2D at 0x7f7dbbe865d0>,\n"," <matplotlib.lines.Line2D at 0x7f7dbbe0b150>,\n"," <matplotlib.lines.Line2D at 0x7f7dbbe86cd0>,\n"," <matplotlib.lines.Line2D at 0x7f7dbbeb30d0>,\n"," <matplotlib.lines.Line2D at 0x7f7dbbe9cf10>,\n"," <matplotlib.lines.Line2D at 0x7f7dbbe9c290>,\n"," <matplotlib.lines.Line2D at 0x7f7e789fbe50>,\n"," <matplotlib.lines.Line2D at 0x7f7e78abd090>,\n"," <matplotlib.lines.Line2D at 0x7f7e78ad32d0>]"]},"metadata":{},"execution_count":103},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["## Nearest Neighbors"],"metadata":{"id":"2YzSESsCkeOg"}},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from matplotlib.colors import ListedColormap\n","from sklearn import neighbors, datasets\n","from sklearn.neighbors import KNeighborsClassifier\n","\n","knn = KNeighborsClassifier(n_neighbors=25)\n","\n","# Train the model using the training sets\n","knn.fit(X_train,Y_train)\n","\n","#Predict Output\n","Y_pred = knn.predict(X_test) \n","\n","#Import scikit-learn metrics module for accuracy calculation\n","from sklearn import metrics\n","# Model Accuracy, how often is the classifier correct?\n","print(\"Accuracy:\",metrics.accuracy_score(Y_test, Y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Hy4j3tEkVEda","executionInfo":{"status":"ok","timestamp":1651592720719,"user_tz":240,"elapsed":961,"user":{"displayName":"Wen Jian","userId":"18293499394767959408"}},"outputId":"21c60b5d-9532-4b57-ad80-3f483ebb2176"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/neighbors/_classification.py:198: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  return self._fit(X, y)\n"]},{"output_type":"stream","name":"stdout","text":["Accuracy: 0.512540192926045\n"]}]}]}